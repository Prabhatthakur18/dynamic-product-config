// This would be the built React application
// In a real implementation, this would be the output of `npm run build`
// For now, we'll include a placeholder that initializes the React app

(function() {
    'use strict';
    
    // Wait for DOM to be ready
    document.addEventListener('DOMContentLoaded', function() {
        initializeConfigurators();
    });
    
    function initializeConfigurators() {
        const configurators = document.querySelectorAll('.dpc-configurator');
        
        configurators.forEach(function(element) {
            const productId = element.getAttribute('data-product-id');
            const dpcProductId = element.getAttribute('data-dpc-product-id');
            
            if (productId) {
                loadConfigurator(element, productId, dpcProductId);
            }
        });
    }
    
    function loadConfigurator(element, productId, dpcProductId) {
        // Show loading state
        element.innerHTML = '<div class="dpc-loading">Loading configurator...</div>';
        
        // Get product data
        fetch(dpcAjax.ajaxurl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({
                action: 'dpc_get_product_data',
                product_id: productId,
                nonce: dpcAjax.nonce
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                renderConfigurator(element, data.data, productId);
            } else {
                element.innerHTML = '<div class="dpc-error">Error loading product configuration: ' + (data.data.message || 'Unknown error') + '</div>';
            }
        })
        .catch(error => {
            console.error('Error loading configurator:', error);
            element.innerHTML = '<div class="dpc-error">Error loading product configuration. Please try again.</div>';
        });
    }
    
    function renderConfigurator(element, productData, wcProductId) {
        const product = productData.product;
        const attributes = productData.attributes;
        const complementary = productData.complementary;
        
        let html = '<div class="dpc-product-configurator">';
        
        // Product info
        html += '<div class="dpc-product-info">';
        html += '<h3>' + escapeHtml(product.name) + '</h3>';
        html += '<div class="dpc-price">₹<span id="dpc-current-price">' + product.basePrice.toFixed(2) + '</span></div>';
        html += '</div>';
        
        // Attribute selectors
        html += '<div class="dpc-attributes">';
        product.attributeTypes.forEach(function(attrType) {
            if (attributes[attrType]) {
                html += '<div class="dpc-attribute-group">';
                html += '<label>Select Your ' + escapeHtml(attrType.charAt(0).toUpperCase() + attrType.slice(1)) + ':</label>';
                html += '<select class="dpc-attribute-select" data-attribute="' + escapeHtml(attrType) + '">';
                html += '<option value="">Choose ' + escapeHtml(attrType) + '</option>';
                
                attributes[attrType].forEach(function(option) {
                    const priceText = option.priceModifier ? ' (+₹' + option.priceModifier + ')' : '';
                    html += '<option value="' + escapeHtml(option.value) + '" data-price-modifier="' + option.priceModifier + '">';
                    html += escapeHtml(option.label) + priceText;
                    html += '</option>';
                });
                
                html += '</select>';
                html += '</div>';
            }
        });
        html += '</div>';
        
        // Complementary products
        if (complementary && complementary.length > 0) {
            html += '<div class="dpc-complementary">';
            html += '<h4>Add Complementary Items:</h4>';
            
            complementary.forEach(function(comp) {
                html += '<div class="dpc-complementary-item">';
                html += '<label>';
                html += '<input type="checkbox" class="dpc-complementary-checkbox" data-product-id="' + escapeHtml(comp.id) + '" data-price="' + comp.price + '">';
                html += escapeHtml(comp.name) + ' - ₹' + comp.price.toFixed(2);
                html += '</label>';
                html += '</div>';
            });
            
            html += '</div>';
        }
        
        // Add to cart button
        html += '<div class="dpc-actions">';
        html += '<button type="button" class="dpc-add-to-cart button" data-product-id="' + wcProductId + '" data-dpc-product-id="' + escapeHtml(product.id) + '" disabled>';
        html += 'ADD TO CART';
        html += '</button>';
        html += '</div>';
        
        html += '</div>';
        
        element.innerHTML = html;
        
        // Attach event listeners
        attachEventListeners(element, product, wcProductId);
    }
    
    function attachEventListeners(element, product, wcProductId) {
        const attributeSelects = element.querySelectorAll('.dpc-attribute-select');
        const addToCartBtn = element.querySelector('.dpc-add-to-cart');
        const priceElement = element.querySelector('#dpc-current-price');
        
        // Attribute change handlers
        attributeSelects.forEach(function(select) {
            select.addEventListener('change', function() {
                updatePrice(element, product);
                validateForm(element, product);
            });
        });
        
        // Add to cart handler
        addToCartBtn.addEventListener('click', function() {
            addToCart(element, product, wcProductId);
        });
    }
    
    function updatePrice(element, product) {
        const attributeSelects = element.querySelectorAll('.dpc-attribute-select');
        const priceElement = element.querySelector('#dpc-current-price');
        
        let totalPrice = product.basePrice;
        
        attributeSelects.forEach(function(select) {
            const selectedOption = select.options[select.selectedIndex];
            if (selectedOption && selectedOption.dataset.priceModifier) {
                totalPrice += parseFloat(selectedOption.dataset.priceModifier);
            }
        });
        
        priceElement.textContent = totalPrice.toFixed(2);
    }
    
    function validateForm(element, product) {
        const attributeSelects = element.querySelectorAll('.dpc-attribute-select');
        const addToCartBtn = element.querySelector('.dpc-add-to-cart');
        
        let allSelected = true;
        
        attributeSelects.forEach(function(select) {
            if (!select.value) {
                allSelected = false;
            }
        });
        
        addToCartBtn.disabled = !allSelected;
    }
    
    function addToCart(element, product, wcProductId) {
        const attributeSelects = element.querySelectorAll('.dpc-attribute-select');
        const addToCartBtn = element.querySelector('.dpc-add-to-cart');
        
        // Collect selected attributes
        const selectedAttributes = {};
        let priceModifier = 0;
        
        attributeSelects.forEach(function(select) {
            const attrType = select.dataset.attribute;
            const selectedOption = select.options[select.selectedIndex];
            
            if (selectedOption && selectedOption.value) {
                selectedAttributes[attrType] = selectedOption.value;
                
                if (selectedOption.dataset.priceModifier) {
                    priceModifier += parseFloat(selectedOption.dataset.priceModifier);
                }
            }
        });
        
        // Disable button and show loading
        addToCartBtn.disabled = true;
        addToCartBtn.textContent = 'ADDING...';
        
        // Add to cart via AJAX
        fetch(dpcAjax.ajaxurl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({
                action: 'dpc_add_to_cart',
                product_id: wcProductId,
                quantity: 1,
                attributes: JSON.stringify(selectedAttributes),
                price_modifier: priceModifier,
                dpc_product_id: product.id,
                nonce: dpcAjax.nonce
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                showNotice('Product added to cart successfully!', 'success');
                
                // Update cart count if available
                updateCartCount(data.data.cart_count);
            } else {
                showNotice('Error adding product to cart: ' + (data.data.message || 'Unknown error'), 'error');
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
            showNotice('Error adding product to cart. Please try again.', 'error');
        })
        .finally(function() {
            // Re-enable button
            addToCartBtn.disabled = false;
            addToCartBtn.textContent = 'ADD TO CART';
        });
    }
    
    function showNotice(message, type) {
        const notice = document.createElement('div');
        notice.className = 'dpc-notice dpc-notice-' + type;
        notice.textContent = message;
        
        // Insert at top of page
        document.body.insertBefore(notice, document.body.firstChild);
        
        // Auto-remove after 5 seconds
        setTimeout(function() {
            if (notice.parentNode) {
                notice.parentNode.removeChild(notice);
            }
        }, 5000);
    }
    
    function updateCartCount(count) {
        // Update WooCommerce cart count if element exists
        const cartCountElements = document.querySelectorAll('.cart-contents-count, .cart-count');
        cartCountElements.forEach(function(element) {
            element.textContent = count;
        });
    }
    
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
})();