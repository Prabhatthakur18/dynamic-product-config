// Dynamic Product Configurator Frontend JavaScript
// Handles brand/model selection and product configuration

(function() {
    'use strict';
    
    // Wait for DOM to be ready
    document.addEventListener('DOMContentLoaded', function() {
        initializeConfigurators();
    });
    
    function initializeConfigurators() {
        const configurators = document.querySelectorAll('.dpc-configurator');
        
        configurators.forEach(function(element) {
            const productId = element.getAttribute('data-product-id');
            const dpcProductId = element.getAttribute('data-dpc-product-id');
            
            if (productId || element.classList.contains('dpc-brand-selector')) {
                loadConfigurator(element, productId, dpcProductId);
            }
        });
    }
    
    function loadConfigurator(element, productId, dpcProductId) {
        // Check if this is a brand selector or specific product
        if (element.classList.contains('dpc-brand-selector') || !productId) {
            renderBrandSelector(element);
        } else {
            loadSpecificProduct(element, productId, dpcProductId);
        }
    }
    
    function renderBrandSelector(element) {
        element.innerHTML = '<div class="dpc-loading">Loading brands...</div>';
        
        // Get available brands
        fetch(dpcAjax.ajaxurl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({
                action: 'dpc_get_brands_list',
                nonce: dpcAjax.nonce
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                renderBrandModelSelector(element, data.data);
            } else {
                element.innerHTML = '<div class="dpc-error">Error loading brands: ' + (data.data || 'Unknown error') + '</div>';
            }
        })
        .catch(error => {
            console.error('Error loading brands:', error);
            element.innerHTML = '<div class="dpc-error">Error loading brands. Please try again.</div>';
        });
    }
    
    function renderBrandModelSelector(element, brands) {
        let html = '<div class="dpc-brand-model-selector">';
        
        // Header
        html += '<div class="dpc-selector-header">';
        html += '<h3>Select Your Device</h3>';
        html += '<p>Choose your brand and model to see available products</p>';
        html += '</div>';
        
        // Brand selector
        html += '<div class="dpc-selector-group">';
        html += '<label class="dpc-selector-label">Select Brand:</label>';
        html += '<select class="dpc-brand-select" id="dpc-brand-select">';
        html += '<option value="">Choose Brand</option>';
        
        brands.forEach(function(brand) {
            html += '<option value="' + escapeHtml(brand.brand) + '">' + escapeHtml(brand.label) + '</option>';
        });
        
        html += '</select>';
        html += '</div>';
        
        // Model selector (initially hidden)
        html += '<div class="dpc-selector-group" id="dpc-model-group" style="display: none;">';
        html += '<label class="dpc-selector-label">Select Model:</label>';
        html += '<select class="dpc-model-select" id="dpc-model-select">';
        html += '<option value="">Choose Model</option>';
        html += '</select>';
        html += '</div>';
        
        // Product display area
        html += '<div class="dpc-product-display" id="dpc-product-display" style="display: none;"></div>';
        
        html += '</div>';
        
        element.innerHTML = html;
        
        // Attach event listeners
        attachBrandModelListeners(element);
    }
    
    function attachBrandModelListeners(element) {
        const brandSelect = element.querySelector('#dpc-brand-select');
        const modelSelect = element.querySelector('#dpc-model-select');
        const modelGroup = element.querySelector('#dpc-model-group');
        const productDisplay = element.querySelector('#dpc-product-display');
        
        // Brand change handler
        brandSelect.addEventListener('change', function() {
            const selectedBrand = this.value;
            
            if (selectedBrand) {
                loadModelsForBrand(selectedBrand, modelSelect, modelGroup);
            } else {
                modelGroup.style.display = 'none';
                productDisplay.style.display = 'none';
            }
        });
        
        // Model change handler
        modelSelect.addEventListener('change', function() {
            const selectedBrand = brandSelect.value;
            const selectedModel = this.value;
            
            if (selectedBrand && selectedModel) {
                loadProductsForBrandModel(selectedBrand, selectedModel, productDisplay);
            } else {
                productDisplay.style.display = 'none';
            }
        });
    }
    
    function loadModelsForBrand(brand, modelSelect, modelGroup) {
        modelSelect.innerHTML = '<option value="">Loading models...</option>';
        modelGroup.style.display = 'block';
        
        fetch(dpcAjax.ajaxurl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({
                action: 'dpc_get_models_for_brand',
                brand: brand,
                nonce: dpcAjax.nonce
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                modelSelect.innerHTML = '<option value="">Choose Model</option>';
                data.data.forEach(function(model) {
                    const option = document.createElement('option');
                    option.value = model.model;
                    option.textContent = model.label;
                    modelSelect.appendChild(option);
                });
            } else {
                modelSelect.innerHTML = '<option value="">Error loading models</option>';
            }
        })
        .catch(error => {
            console.error('Error loading models:', error);
            modelSelect.innerHTML = '<option value="">Error loading models</option>';
        });
    }
    
    function loadProductsForBrandModel(brand, model, productDisplay) {
        productDisplay.innerHTML = '<div class="dpc-loading">Loading products...</div>';
        productDisplay.style.display = 'block';
        
        fetch(dpcAjax.ajaxurl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({
                action: 'dpc_get_products_by_brand_model',
                brand: brand,
                model: model,
                nonce: dpcAjax.nonce
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success && data.data.length > 0) {
                renderProductGrid(productDisplay, data.data);
            } else {
                productDisplay.innerHTML = '<div class="dpc-no-products">No products found for ' + brand + ' ' + model + '</div>';
            }
        })
        .catch(error => {
            console.error('Error loading products:', error);
            productDisplay.innerHTML = '<div class="dpc-error">Error loading products. Please try again.</div>';
        });
    }
    
    function renderProductGrid(container, products) {
        let html = '<div class="dpc-products-grid">';
        html += '<h4>Available Products for Your Device:</h4>';
        html += '<div class="dpc-products-list">';
        
        products.forEach(function(product) {
            html += '<div class="dpc-product-card" data-product-id="' + product.wc_product_id + '">';
            
            if (product.image_url) {
                html += '<div class="dpc-product-image">';
                html += '<img src="' + escapeHtml(product.image_url) + '" alt="' + escapeHtml(product.product_name) + '" />';
                html += '</div>';
            }
            
            html += '<div class="dpc-product-info">';
            html += '<h5 class="dpc-product-title">' + escapeHtml(product.product_name) + '</h5>';
            html += '<div class="dpc-product-price">â‚¹' + parseFloat(product.base_price).toFixed(2) + '</div>';
            html += '<button type="button" class="dpc-add-to-cart-btn" data-product-id="' + product.wc_product_id + '" data-dpc-product-id="' + escapeHtml(product.product_id) + '">';
            html += 'ADD TO CART';
            html += '</button>';
            html += '</div>';
            
            html += '</div>';
        });
        
        html += '</div>';
        html += '</div>';
        
        container.innerHTML = html;
        
        // Attach add to cart listeners
        attachAddToCartListeners(container);
    }
    
    function attachAddToCartListeners(container) {
        const addToCartButtons = container.querySelectorAll('.dpc-add-to-cart-btn');
        
        addToCartButtons.forEach(function(button) {
            button.addEventListener('click', function() {
                const productId = this.getAttribute('data-product-id');
                const dpcProductId = this.getAttribute('data-dpc-product-id');
                
                addToCart(productId, dpcProductId, this);
            });
        });
    }
    
    function addToCart(productId, dpcProductId, button) {
        const originalText = button.textContent;
        button.disabled = true;
        button.textContent = 'ADDING...';
        
        // For brand/model selector, we don't need specific attributes
        // The brand and model are already determined by the selection
        const selectedAttributes = {};
        
        fetch(dpcAjax.ajaxurl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({
                action: 'dpc_add_to_cart',
                product_id: productId,
                quantity: 1,
                attributes: JSON.stringify(selectedAttributes),
                price_modifier: 0,
                dpc_product_id: dpcProductId,
                nonce: dpcAjax.nonce
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotice('Product added to cart successfully!', 'success');
                updateCartCount(data.data.cart_count);
            } else {
                showNotice('Error adding product to cart: ' + (data.data.message || 'Unknown error'), 'error');
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
            showNotice('Error adding product to cart. Please try again.', 'error');
        })
        .finally(function() {
            button.disabled = false;
            button.textContent = originalText;
        });
    }
    
    function loadSpecificProduct(element, productId, dpcProductId) {
        // Show loading state
        element.innerHTML = '<div class="dpc-loading">Loading configurator...</div>';
        
        // Get product data
        fetch(dpcAjax.ajaxurl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({
                action: 'dpc_get_product_data',
                product_id: productId,
                nonce: dpcAjax.nonce
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                renderConfigurator(element, data.data, productId);
            } else {
                element.innerHTML = '<div class="dpc-error">Error loading product configuration: ' + (data.data.message || 'Unknown error') + '</div>';
            }
        })
        .catch(error => {
            console.error('Error loading configurator:', error);
            element.innerHTML = '<div class="dpc-error">Error loading product configuration. Please try again.</div>';
        });
    }
    
    function renderConfigurator(element, productData, wcProductId) {
        const product = productData.product;
        const attributes = productData.attributes;
        const complementary = productData.complementary;
        
        let html = '<div class="dpc-product-configurator">';
        
        // Product info
        html += '<div class="dpc-product-info">';
        html += '<h3>' + escapeHtml(product.name) + '</h3>';
        html += '<div class="dpc-price">â‚¹<span id="dpc-current-price">' + product.basePrice.toFixed(2) + '</span></div>';
        html += '</div>';
        
        // Attribute selectors
        html += '<div class="dpc-attributes">';
        product.attributeTypes.forEach(function(attrType) {
            if (attributes[attrType]) {
                html += '<div class="dpc-attribute-group">';
                html += '<label>Select Your ' + escapeHtml(attrType.charAt(0).toUpperCase() + attrType.slice(1)) + ':</label>';
                html += '<select class="dpc-attribute-select" data-attribute="' + escapeHtml(attrType) + '">';
                html += '<option value="">Choose ' + escapeHtml(attrType) + '</option>';
                
                attributes[attrType].forEach(function(option) {
                    const priceText = option.priceModifier ? ' (+â‚¹' + option.priceModifier + ')' : '';
                    html += '<option value="' + escapeHtml(option.value) + '" data-price-modifier="' + option.priceModifier + '">';
                    html += escapeHtml(option.label) + priceText;
                    html += '</option>';
                });
                
                html += '</select>';
                html += '</div>';
            }
        });
        html += '</div>';
        
        // Complementary products
        if (complementary && complementary.length > 0) {
            html += '<div class="dpc-complementary">';
            html += '<h4>Add Complementary Items:</h4>';
            
            complementary.forEach(function(comp) {
                html += '<div class="dpc-complementary-item">';
                html += '<label>';
                html += '<input type="checkbox" class="dpc-complementary-checkbox" data-product-id="' + escapeHtml(comp.id) + '" data-price="' + comp.price + '">';
                html += escapeHtml(comp.name) + ' - â‚¹' + comp.price.toFixed(2);
                html += '</label>';
                html += '</div>';
            });
            
            html += '</div>';
        }
        
        // Add to cart button
        html += '<div class="dpc-actions">';
        html += '<button type="button" class="dpc-add-to-cart button" data-product-id="' + wcProductId + '" data-dpc-product-id="' + escapeHtml(product.id) + '" disabled>';
        html += 'ADD TO CART';
        html += '</button>';
        html += '</div>';
        
        html += '</div>';
        
        element.innerHTML = html;
        
        // Attach event listeners
        attachEventListeners(element, product, wcProductId);
    }
    
    function attachEventListeners(element, product, wcProductId) {
        const attributeSelects = element.querySelectorAll('.dpc-attribute-select');
        const addToCartBtn = element.querySelector('.dpc-add-to-cart');
        const priceElement = element.querySelector('#dpc-current-price');
        
        // Attribute change handlers
        attributeSelects.forEach(function(select) {
            select.addEventListener('change', function() {
                updatePrice(element, product);
                validateForm(element, product);
            });
        });
        
        // Add to cart handler
        addToCartBtn.addEventListener('click', function() {
            addToCartFromConfigurator(element, product, wcProductId);
        });
    }
    
    function updatePrice(element, product) {
        const attributeSelects = element.querySelectorAll('.dpc-attribute-select');
        const priceElement = element.querySelector('#dpc-current-price');
        
        let totalPrice = product.basePrice;
        
        attributeSelects.forEach(function(select) {
            const selectedOption = select.options[select.selectedIndex];
            if (selectedOption && selectedOption.dataset.priceModifier) {
                totalPrice += parseFloat(selectedOption.dataset.priceModifier);
            }
        });
        
        priceElement.textContent = totalPrice.toFixed(2);
    }
    
    function validateForm(element, product) {
        const attributeSelects = element.querySelectorAll('.dpc-attribute-select');
        const addToCartBtn = element.querySelector('.dpc-add-to-cart');
        
        let allSelected = true;
        
        attributeSelects.forEach(function(select) {
            if (!select.value) {
                allSelected = false;
            }
        });
        
        addToCartBtn.disabled = !allSelected;
    }
    
    function addToCartFromConfigurator(element, product, wcProductId) {
        const attributeSelects = element.querySelectorAll('.dpc-attribute-select');
        const addToCartBtn = element.querySelector('.dpc-add-to-cart');
        
        // Collect selected attributes
        const selectedAttributes = {};
        let priceModifier = 0;
        
        attributeSelects.forEach(function(select) {
            const attrType = select.dataset.attribute;
            const selectedOption = select.options[select.selectedIndex];
            
            if (selectedOption && selectedOption.value) {
                selectedAttributes[attrType] = selectedOption.value;
                
                if (selectedOption.dataset.priceModifier) {
                    priceModifier += parseFloat(selectedOption.dataset.priceModifier);
                }
            }
        });
        
        // Disable button and show loading
        addToCartBtn.disabled = true;
        addToCartBtn.textContent = 'ADDING...';
        
        // Add to cart via AJAX
        fetch(dpcAjax.ajaxurl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({
                action: 'dpc_add_to_cart',
                product_id: wcProductId,
                quantity: 1,
                attributes: JSON.stringify(selectedAttributes),
                price_modifier: priceModifier,
                dpc_product_id: product.id,
                nonce: dpcAjax.nonce
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotice('Product added to cart successfully!', 'success');
                updateCartCount(data.data.cart_count);
            } else {
                showNotice('Error adding product to cart: ' + (data.data.message || 'Unknown error'), 'error');
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
            showNotice('Error adding product to cart. Please try again.', 'error');
        })
        .finally(function() {
            addToCartBtn.disabled = false;
            addToCartBtn.textContent = 'ADD TO CART';
        });
    }
    
    function showNotice(message, type) {
        const notice = document.createElement('div');
        notice.className = 'dpc-notice dpc-notice-' + type;
        notice.textContent = message;
        
        // Insert at top of page
        document.body.insertBefore(notice, document.body.firstChild);
        
        // Auto-remove after 5 seconds
        setTimeout(function() {
            if (notice.parentNode) {
                notice.parentNode.removeChild(notice);
            }
        }, 5000);
    }
    
    function updateCartCount(count) {
        // Update WooCommerce cart count if element exists
        const cartCountElements = document.querySelectorAll('.cart-contents-count, .cart-count');
        cartCountElements.forEach(function(element) {
            element.textContent = count;
        });
    }
    
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
})();